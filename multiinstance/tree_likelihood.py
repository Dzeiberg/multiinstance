# AUTOGENERATED! DO NOT EDIT! File to edit: 25_Likelihood_With_Ward.ipynb (unless otherwise specified).

__all__ = ['LikelihoodMethod']

# Cell
from autograd import grad,hessian
from autograd.scipy import  stats as agss
import autograd.numpy as np

import scipy.stats as ss

from tqdm.notebook import tqdm

# Cell

class LikelihoodMethod:
    def __init__(self,ds,clusterAssignments, alphaHatMat,lr=0.01,rowLambda=1.0):
        self.ds = ds
        self.clusterAssignments = clusterAssignments.astype(int)
        self.alphaHatMat = alphaHatMat
        self.leafMeans = np.mean(self.alphaHatMat[0],axis=1)
        self.initClusterVariances()
        self.lr = lr
        self.meanHistory = []
        self.varianceHistory = []
        self.MAEs = []
        self.NLLs = []
        self.rowLambda = rowLambda

    def initClusterVariances(self):
            self.clusterVariances = []
            # Coordinate tuple in clusterAssignment -> index withing cluster variances
            self.loc2Idx = {}
            for rowNum in range(self.clusterAssignments.shape[0]):
                levelClusters = np.unique(self.clusterAssignments[rowNum])
                for cluster in levelClusters:
                    self.loc2Idx[(rowNum,cluster)] = len(self.clusterVariances)
                    alphaHats= self.alphaHatMat[rowNum, cluster]
                    _,v = ss.norm.fit(alphaHats)
                    self.clusterVariances.append(v)

            self.clusterVariances = np.array(self.clusterVariances)

    def logLikelihood(self,alphaHats, mu, sigma):
        LL = np.sum(agss.norm.logpdf(alphaHats, mu, sigma))
        LL = LL * (1 / len(alphaHats))
        return LL

    def treeNegativeLogLikelihood(self):
        def getLevelClusters(rowNum):
            clusterLabels = np.unique(self.clusterAssignments[rowNum])
            clusters = {c : np.where(self.clusterAssignments[rowNum] == c)[0] for c in clusterLabels}
            return clusters

        def getClusterMean(leafMeans, clusterMembers):
            leafSizes= np.array([self.ds.numU[i] for i in clusterMembers])
            alphaTilde = np.dot(leafMeans[clusterMembers], leafSizes) / np.sum(leafSizes)
            return alphaTilde

        def NLL(leafMeans, clusterVars):
            ll = 0
            for rowNum in range(self.clusterAssignments.shape[0]):
                clusters = getLevelClusters(rowNum)
                for clusterIdx, clusterMembers in clusters.items():
                    clusterMean = getClusterMean(leafMeans,clusterMembers)
                    varIdx = self.loc2Idx[(rowNum, clusterIdx)]
                    clusterVar = clusterVars[varIdx]
                    alphaHats = self.alphaHatMat[rowNum, clusterIdx]
                    ll = ll + self.rowLambda**rowNum * self.logLikelihood(alphaHats, clusterMean, clusterVar)
            return -1 * ll
        return NLL

    def run(self, n_iters):
        gradNLL_mu = grad(self.treeNegativeLogLikelihood(), 0)
        gradNLL_sigma = grad(self.treeNegativeLogLikelihood(), 1)
        hessianNLL_mu = hessian(self.treeNegativeLogLikelihood(), 0)
        hessianNLL_sigma = hessian(self.treeNegativeLogLikelihood(), 1)
        self.log()
        means = self.leafMeans
        var = self.clusterVariances
        for iteration in tqdm(range(n_iters)):
            if not n_iters % 500:
                self.lr *= .95
            deltaMu = np.linalg.inv(hessianNLL_mu(means,
                                                  var)) @ gradNLL_mu(means,
                                                                     var)
            deltaSigma = np.linalg.inv(hessianNLL_sigma(mean,
                                                        var)) @ gradNLL_sigma(means,
                                                                             var)
            means = means - self.lr * deltaMu
            var = var - self.lr * deltaSigma
            assert (self.clusterVariances > 0).all()
            self.log()

    def log(self):
        self.MAEs.append(np.mean(np.abs(dsi.trueAlphas.flatten() - self.leafMeans)))
        nllfunc = self.treeNegativeLogLikelihood()
        self.NLLs.append(nllfunc(self.leafMeans, self.clusterVariances))
        self.meanHistory.append(self.leafMeans)
        self.varianceHistory.append(self.clusterVariances)